{"id": 1, "prompt": "Given a 3x3 grid containing a white diamond, flip the grid vertically. Return only the final operation name in snake_case.", "generation": "The following code will return the final operation name in snake_case.\n\n/* * @param snake_case The snake case */ snake_case ( snake_case ) { return snake_case ( snake_case ); }\n\nThe following code will return the final operation name in snake_case."}
{"id": 2, "prompt": "Given a 2x2 grid containing a red L-shape, flip the grid horizontally. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to flip the grid horizontally.\n\n// flip the grid horizontally. snake_case(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,"}
{"id": 3, "prompt": "Given a 2x2 grid containing a green L-shape, flip the grid vertically. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to flip the grid horizontally.\n\n// flip the grid horizontally. snake_case(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,"}
{"id": 4, "prompt": "Given a 2x2 grid containing a yellow diamond, flip the grid horizontally. Return only the final operation name in snake_case.", "generation": "The following code will return the final operation name in snake_case.\n\n/* * @param snake_case The snake case */ snake_case ( snake_case ) { return snake_case ( snake_case ); }\n\nThe following code will return the final operation name in snake_case."}
{"id": 5, "prompt": "Given a 3x3 grid containing a black square, flip the grid horizontally. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to use the snake_case function to flip the grid horizontally.\n\nvar snake = new snake (); var snake_case = snake_case . flip (); var snake_case = snake_case . flip (); var snake_case = snake_case . flip (); var snake"}
{"id": 6, "prompt": "Given a 2x2 grid containing a red L-shape, flip the grid vertically. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to flip the grid horizontally.\n\n// flip the grid horizontally. snake_case(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,"}
{"id": 7, "prompt": "Given a 2x2 grid containing a black L-shape, flip the grid horizontally. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to flip the grid horizontally.\n\n// flip the grid horizontally. snake_case(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,"}
{"id": 8, "prompt": "Given a 2x2 grid containing a red triangle, flip the grid vertically. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to flip the grid horizontally.\n\n// flip the grid horizontally. snake_case(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,"}
{"id": 9, "prompt": "Given a 3x3 grid containing a yellow circle, rotate the grid 90 degrees clockwise. Return only the final operation name in snake_case.", "generation": "The following code will return the final operation name in snake_case.\n\n/* * @param snake_case The snake case to return */ snake_case = snake_case.get_final_operation(0); /* * @return The final operation name */ snake_case = snake_case."}
{"id": 10, "prompt": "Given a 2x2 grid containing a blue L-shape, flip the grid horizontally. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to flip the grid horizontally.\n\n// flip the grid horizontally. snake_case(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,"}
{"id": 11, "prompt": "Given a 3x3 grid containing a black square, rotate the grid 90 degrees clockwise. Return only the final operation name in snake_case.", "generation": "The following code is a simple example of how to use the snake_case function to create a new snake.\n\nvar snake = new snake(); var snake_case = snake.new(); var snake_case = snake.new(); var snake_case = snake.new(); var snake_case ="}
{"id": 12, "prompt": "Given a 3x3 grid containing a red circle, rotate the grid 90 degrees clockwise. Return only the final operation name in snake_case.", "generation": "The following code will return the final operation name in snake_case.\n\n/* * @param snake_case The snake case to return */ snake_case = snake_case.get_final_operation(0); /* * @return The final operation name */ snake_case = snake_case."}
{"id": 13, "prompt": "Given a 2x2 grid containing a red L-shape, rotate the grid 90 degrees clockwise. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to use the snake_case function to rotate the grid.\n\nvar snake = new snake (); var snake_case = snake_case . rotate ( 90 , 90 ); var snake_case = snake_case . rotate ( 90 , 90 ); var snake_case = snake"}
{"id": 14, "prompt": "Given a 3x3 grid containing a white diamond, rotate the grid 90 degrees clockwise. Return only the final operation name in snake_case.", "generation": "The following code will return the final operation name in snake_case.\n\n/* * @param snake_case The snake case to return */ snake_case = snake_case.get_key(0); /* * @param snake_case_key The snake case to return */ snake_case ="}
{"id": 15, "prompt": "Given a 5x5 grid containing a yellow circle, rotate the grid 90 degrees clockwise. Return only the final operation name in snake_case.", "generation": "The following code will return the final operation name in snake_case.\n\n/* * @param snake_case The snake case to return */ snake_case = snake_case.get_final_operation(0); /* * @return The final operation name */ snake_case = snake_case."}
{"id": 16, "prompt": "Given a 5x5 grid containing a blue circle, rotate the grid 90 degrees clockwise. Return only the final operation name in snake_case.", "generation": "The following code will return the final operation name in snake_case.\n\n/* * @param snake_case The snake case to return */ snake_case = snake_case.get_name(); /* * @return The final operation name */ snake_case = snake_case.get_name();"}
{"id": 17, "prompt": "Given a 3x3 grid containing a red triangle, flip the grid horizontally. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to use the snake_case function to flip the grid horizontally.\n\nvar snake = new snake (); var snake_case = snake_case . flip (); var snake_case = snake_case . flip (); var snake_case = snake_case . flip (); var snake"}
{"id": 18, "prompt": "Given a 4x4 grid containing a yellow L-shape, rotate the grid 90 degrees clockwise. Return only the final operation name in snake_case.", "generation": "The following code snippet shows how to use the snake_case function to rotate the grid.\n\nfunction snake_case ( x , y , z ) { snake_case ( x , y , z ); }\n\nThe snake_case function is used to rotate the grid.\n\nfunction snake_"}
{"id": 19, "prompt": "Given a 5x5 grid containing a black circle, flip the grid vertically. Return only the final operation name in snake_case.", "generation": "The following code will return the final operation name in snake_case.\n\n/* * @param snake_case The case of the snake */ snake_case = snake_case; /* * @return The final operation name */ snake_case = snake_case; /* * @return The final operation name"}
{"id": 20, "prompt": "Given a 2x2 grid containing a yellow L-shape, flip the grid horizontally. Return only the final operation name in snake_case.", "generation": "The following example shows how to flip the grid horizontally.\n\n#!/usr/bin/env python import snake import time import sys import time import sys.argv import sys.argv.sys.argv.sys.argv.sys.argv.sys.argv.sys."}
{"id": 21, "prompt": "Compute 12+23. Return only the integer.", "generation": "Example:\n\nint main() { int i = 0; for (i = 0; i < 10; i++) { int i = 10; for (i = 0; i < 10; i++) { int i = 10; for (i = 0; i < 10; i++) {"}
{"id": 22, "prompt": "Compute 11+33. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.plot.py import matplotlib.pyplot."}
{"id": 23, "prompt": "Compute 28+4. Return only the integer.", "generation": "The following example shows how to compute the number of iterations of a function.\n\nfunction ( x , y ) { return x + y ; }\n\nThe following example shows how to compute the number of iterations of a function.\n\nfunction ( x , y ) { return x + y ; }"}
{"id": 24, "prompt": "Compute 6+37. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.plot.plt.plt.plt."}
{"id": 25, "prompt": "Compute 38+22. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.pyplot.plt.pyplot.plt"}
{"id": 26, "prompt": "Compute 23+24. Return only the integer.", "generation": "Example:\n\n#include <stdio.h> #include <string.h> #include <vector> #include <vector> #include <string.h> #include <string.h> #include <string.h> #include <string.h> #include <string."}
{"id": 27, "prompt": "Compute 40+33. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.plot.plt.plt.plt."}
{"id": 28, "prompt": "Compute 39+31. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.pyplot.plt.pyplot.plt"}
{"id": 29, "prompt": "Compute 6+7. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.pyplot.plt.pyplot.plt"}
{"id": 30, "prompt": "Compute 19+32. Return only the integer.", "generation": "The following example shows how to compute the number of iterations of a function.\n\nfunction ( x , y ) { return x + y ; }\n\nThe following example shows how to compute the number of iterations of a function.\n\nfunction ( x , y ) { return x + y ; }"}
{"id": 31, "prompt": "Compute 6+5. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.pyplot.plt.pyplot.plt"}
{"id": 32, "prompt": "Compute 21+38. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.plot.plt.plt.plt."}
{"id": 33, "prompt": "Compute 30+20. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.plot.plt.plt.plt."}
{"id": 34, "prompt": "Compute 26+24. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.pyplot.plt.pyplot.plt"}
{"id": 35, "prompt": "Compute 3+31. Return only the integer.", "generation": "Example:\n\n#include <stdio.h> #include <string.h> #include <vector> #include <vector> #include <string.h> #include <string.h> #include <string.h> #include <string.h> #include <string."}
{"id": 36, "prompt": "Compute 24+12. Return only the integer.", "generation": "Example:\n\n#include <stdio.h> #include <string.h> #include <vector> #include <vector> #include <string.h> #include <string.h> #include <string.h> #include <string.h> #include <string."}
{"id": 37, "prompt": "Compute 9+33. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.plot.plt.plt.plt."}
{"id": 38, "prompt": "Compute 5+15. Return only the integer.", "generation": "Example:\n\n#include <stdio.h> #include <string.h> #include <vector> #include <vector> #include <string.h> #include <string.h> #include <string.h> #include <string.h> #include <string."}
{"id": 39, "prompt": "Compute 20+10. Return only the integer.", "generation": "The following example shows how to compute the number of iterations of a function.\n\nfunction ( x , y ) { return x + y ; }\n\nThe following example shows how to compute the number of iterations of a function.\n\nfunction ( x , y ) { return x + y ; }"}
{"id": 40, "prompt": "Compute 17+27. Return only the integer.", "generation": "The following example shows how to compute the number of points in a matrix.\n\nimport math import matplotlib.pyplot as plt import matplotlib.pyplot.plt.plot as plt.pyplot.plt.plot.py as plt.pyplot.pl"}
{"id": 41, "prompt": "Normalize to lowercase, remove duplicates, and sort: east, West, NORTH, south, north, EAST. Return comma-separated.", "generation": "The following table lists the most common errors encountered by the compiler when compiling with the -f option.\n\nErrors\n\nThe following errors are reported by the compiler when compiling with the -f option:\n\nThe following error is reported by the compiler when compiling with the -f option:"}
{"id": 42, "prompt": "Normalize to lowercase, remove duplicates, and sort: east, West, NORTH, south, north, EAST. Return comma-separated.", "generation": "The following table lists the most common errors encountered by the compiler when compiling with the -f option.\n\nErrors\n\nThe following errors are reported by the compiler when compiling with the -f option:\n\nThe following error is reported by the compiler when compiling with the -f option:"}
{"id": 43, "prompt": "Normalize to lowercase, remove duplicates, and sort: blue, Blue, GREEN, green, red. Return comma-separated.", "generation": "The following example shows how to use the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value"}
{"id": 44, "prompt": "Normalize to lowercase, remove duplicates, and sort: alpha, beta, Beta, GAMMA, gamma. Return comma-separated.", "generation": "Return comma-separated. Return a list of all the values in the list.\n\nReturn a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list"}
{"id": 45, "prompt": "Normalize to lowercase, remove duplicates, and sort: east, West, NORTH, south, north, EAST. Return comma-separated.", "generation": "The following table lists the most common errors encountered by the compiler when compiling with the -f option.\n\nErrors\n\nThe following errors are reported by the compiler when compiling with the -f option:\n\nThe following error is reported by the compiler when compiling with the -f option:"}
{"id": 46, "prompt": "Normalize to lowercase, remove duplicates, and sort: east, West, NORTH, south, north, EAST. Return comma-separated.", "generation": "The following table lists the most common errors encountered by the compiler when compiling with the -f option.\n\nErrors\n\nThe following errors are reported by the compiler when compiling with the -f option:\n\nThe following error is reported by the compiler when compiling with the -f option:"}
{"id": 47, "prompt": "Normalize to lowercase, remove duplicates, and sort: rotate, flip_h, rotate, flip_v, FLIP_H. Return comma-separated.", "generation": "Return a list of all the items in the list.\n\nReturn a list of all the items in the list. flip_h: flip_v: flip_v. Return a list of all the items in the list.\n\nReturn a list of all the items in the list. flip_"}
{"id": 48, "prompt": "Normalize to lowercase, remove duplicates, and sort: alpha, beta, Beta, GAMMA, gamma. Return comma-separated.", "generation": "Return comma-separated. Return a list of all the values in the list.\n\nReturn a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list"}
{"id": 49, "prompt": "Normalize to lowercase, remove duplicates, and sort: east, West, NORTH, south, north, EAST. Return comma-separated.", "generation": "The following table lists the most common errors encountered by the compiler when compiling with the -f option.\n\nErrors\n\nThe following errors are reported by the compiler when compiling with the -f option:\n\nThe following error is reported by the compiler when compiling with the -f option:"}
{"id": 50, "prompt": "Normalize to lowercase, remove duplicates, and sort: rotate, flip_h, rotate, flip_v, FLIP_H. Return comma-separated.", "generation": "Return a list of all the items in the list.\n\nReturn a list of all the items in the list. flip_h: flip_v: flip_v. Return a list of all the items in the list.\n\nReturn a list of all the items in the list. flip_"}
{"id": 51, "prompt": "Normalize to lowercase, remove duplicates, and sort: east, West, NORTH, south, north, EAST. Return comma-separated.", "generation": "The following table lists the most common errors encountered by the compiler when compiling with the -f option.\n\nErrors\n\nThe following errors are reported by the compiler when compiling with the -f option:\n\nThe following error is reported by the compiler when compiling with the -f option:"}
{"id": 52, "prompt": "Normalize to lowercase, remove duplicates, and sort: rotate, flip_h, rotate, flip_v, FLIP_H. Return comma-separated.", "generation": "Return a list of all the items in the list.\n\nReturn a list of all the items in the list. flip_h: flip_v: flip_v. Return a list of all the items in the list.\n\nReturn a list of all the items in the list. flip_"}
{"id": 53, "prompt": "Normalize to lowercase, remove duplicates, and sort: east, West, NORTH, south, north, EAST. Return comma-separated.", "generation": "The following table lists the most common errors encountered by the compiler when compiling with the -f option.\n\nErrors\n\nThe following errors are reported by the compiler when compiling with the -f option:\n\nThe following error is reported by the compiler when compiling with the -f option:"}
{"id": 54, "prompt": "Normalize to lowercase, remove duplicates, and sort: alpha, beta, Beta, GAMMA, gamma. Return comma-separated.", "generation": "Return comma-separated. Return a list of all the values in the list.\n\nReturn a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list"}
{"id": 55, "prompt": "Normalize to lowercase, remove duplicates, and sort: alpha, beta, Beta, GAMMA, gamma. Return comma-separated.", "generation": "Return comma-separated. Return a list of all the values in the list.\n\nReturn a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list"}
{"id": 56, "prompt": "Normalize to lowercase, remove duplicates, and sort: blue, Blue, GREEN, green, red. Return comma-separated.", "generation": "The following example shows how to use the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value of the default value"}
{"id": 57, "prompt": "Normalize to lowercase, remove duplicates, and sort: alpha, beta, Beta, GAMMA, gamma. Return comma-separated.", "generation": "Return comma-separated. Return a list of all the values in the list.\n\nReturn a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list"}
{"id": 58, "prompt": "Normalize to lowercase, remove duplicates, and sort: alpha, beta, Beta, GAMMA, gamma. Return comma-separated.", "generation": "Return comma-separated. Return a list of all the values in the list.\n\nReturn a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list"}
{"id": 59, "prompt": "Normalize to lowercase, remove duplicates, and sort: alpha, beta, Beta, GAMMA, gamma. Return comma-separated.", "generation": "Return comma-separated. Return a list of all the values in the list.\n\nReturn a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list"}
{"id": 60, "prompt": "Normalize to lowercase, remove duplicates, and sort: alpha, beta, Beta, GAMMA, gamma. Return comma-separated.", "generation": "Return comma-separated. Return a list of all the values in the list.\n\nReturn a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list. Return a list of all the values in the list"}
